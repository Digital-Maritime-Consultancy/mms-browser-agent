// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: smmp.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export interface SmmpMessage {
  header: SmmpHeader | undefined;
  data: Uint8Array;
}

export interface SmmpHeader {
  control: Uint8Array;
  payloadLen: number;
  blockNum?: number | undefined;
  totalBlocks?: number | undefined;
  uuid: string;
  responseToUuid: string[];
}

function createBaseSmmpMessage(): SmmpMessage {
  return { header: undefined, data: new Uint8Array(0) };
}

export const SmmpMessage: MessageFns<SmmpMessage> = {
  encode(message: SmmpMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      SmmpHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SmmpMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSmmpMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = SmmpHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SmmpMessage {
    return {
      header: isSet(object.header) ? SmmpHeader.fromJSON(object.header) : undefined,
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: SmmpMessage): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = SmmpHeader.toJSON(message.header);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SmmpMessage>, I>>(base?: I): SmmpMessage {
    return SmmpMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SmmpMessage>, I>>(object: I): SmmpMessage {
    const message = createBaseSmmpMessage();
    message.header = (object.header !== undefined && object.header !== null)
      ? SmmpHeader.fromPartial(object.header)
      : undefined;
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseSmmpHeader(): SmmpHeader {
  return {
    control: new Uint8Array(0),
    payloadLen: 0,
    blockNum: undefined,
    totalBlocks: undefined,
    uuid: "",
    responseToUuid: [],
  };
}

export const SmmpHeader: MessageFns<SmmpHeader> = {
  encode(message: SmmpHeader, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.control.length !== 0) {
      writer.uint32(10).bytes(message.control);
    }
    if (message.payloadLen !== 0) {
      writer.uint32(16).uint32(message.payloadLen);
    }
    if (message.blockNum !== undefined) {
      writer.uint32(24).uint32(message.blockNum);
    }
    if (message.totalBlocks !== undefined) {
      writer.uint32(32).uint32(message.totalBlocks);
    }
    if (message.uuid !== "") {
      writer.uint32(42).string(message.uuid);
    }
    for (const v of message.responseToUuid) {
      writer.uint32(50).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SmmpHeader {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSmmpHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.control = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.payloadLen = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.blockNum = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalBlocks = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.responseToUuid.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SmmpHeader {
    return {
      control: isSet(object.control) ? bytesFromBase64(object.control) : new Uint8Array(0),
      payloadLen: isSet(object.payloadLen) ? globalThis.Number(object.payloadLen) : 0,
      blockNum: isSet(object.blockNum) ? globalThis.Number(object.blockNum) : undefined,
      totalBlocks: isSet(object.totalBlocks) ? globalThis.Number(object.totalBlocks) : undefined,
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      responseToUuid: globalThis.Array.isArray(object?.responseToUuid)
        ? object.responseToUuid.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: SmmpHeader): unknown {
    const obj: any = {};
    if (message.control.length !== 0) {
      obj.control = base64FromBytes(message.control);
    }
    if (message.payloadLen !== 0) {
      obj.payloadLen = Math.round(message.payloadLen);
    }
    if (message.blockNum !== undefined) {
      obj.blockNum = Math.round(message.blockNum);
    }
    if (message.totalBlocks !== undefined) {
      obj.totalBlocks = Math.round(message.totalBlocks);
    }
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.responseToUuid?.length) {
      obj.responseToUuid = message.responseToUuid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SmmpHeader>, I>>(base?: I): SmmpHeader {
    return SmmpHeader.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SmmpHeader>, I>>(object: I): SmmpHeader {
    const message = createBaseSmmpHeader();
    message.control = object.control ?? new Uint8Array(0);
    message.payloadLen = object.payloadLen ?? 0;
    message.blockNum = object.blockNum ?? undefined;
    message.totalBlocks = object.totalBlocks ?? undefined;
    message.uuid = object.uuid ?? "";
    message.responseToUuid = object.responseToUuid?.map((e) => e) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
