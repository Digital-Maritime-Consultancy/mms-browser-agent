/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: smmp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class SmmpMessage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: SmmpHeader;
        data?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, SmmpHeader, 1) as SmmpHeader;
    }
    set header(value: SmmpHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get data() {
        return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
    }
    set data(value: Uint8Array) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof SmmpHeader.prototype.toObject>;
        data?: Uint8Array;
    }): SmmpMessage {
        const message = new SmmpMessage({});
        if (data.header != null) {
            message.header = SmmpHeader.fromObject(data.header);
        }
        if (data.data != null) {
            message.data = data.data;
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof SmmpHeader.prototype.toObject>;
            data?: Uint8Array;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.data != null) {
            data.data = this.data;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.data.length)
            writer.writeBytes(2, this.data);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmmpMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmmpMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = SmmpHeader.deserialize(reader));
                    break;
                case 2:
                    message.data = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SmmpMessage {
        return SmmpMessage.deserialize(bytes);
    }
}
export class SmmpHeader extends pb_1.Message {
    #one_of_decls: number[][] = [[3], [4]];
    constructor(data?: any[] | ({
        control?: Uint8Array;
        payloadLen?: number;
        uuid?: string;
        responseToUuid?: string[];
    } & (({
        blockNum?: number;
    }) | ({
        totalBlocks?: number;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("control" in data && data.control != undefined) {
                this.control = data.control;
            }
            if ("payloadLen" in data && data.payloadLen != undefined) {
                this.payloadLen = data.payloadLen;
            }
            if ("blockNum" in data && data.blockNum != undefined) {
                this.blockNum = data.blockNum;
            }
            if ("totalBlocks" in data && data.totalBlocks != undefined) {
                this.totalBlocks = data.totalBlocks;
            }
            if ("uuid" in data && data.uuid != undefined) {
                this.uuid = data.uuid;
            }
            if ("responseToUuid" in data && data.responseToUuid != undefined) {
                this.responseToUuid = data.responseToUuid;
            }
        }
    }
    get control() {
        return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
    }
    set control(value: Uint8Array) {
        pb_1.Message.setField(this, 1, value);
    }
    get payloadLen() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set payloadLen(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get blockNum() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set blockNum(value: number) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
    }
    get has_blockNum() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get totalBlocks() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set totalBlocks(value: number) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[1], value);
    }
    get has_totalBlocks() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get uuid() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set uuid(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get responseToUuid() {
        return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
    }
    set responseToUuid(value: string[]) {
        pb_1.Message.setField(this, 6, value);
    }
    get _blockNum() {
        const cases: {
            [index: number]: "none" | "blockNum";
        } = {
            0: "none",
            3: "blockNum"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get _totalBlocks() {
        const cases: {
            [index: number]: "none" | "totalBlocks";
        } = {
            0: "none",
            4: "totalBlocks"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    static fromObject(data: {
        control?: Uint8Array;
        payloadLen?: number;
        blockNum?: number;
        totalBlocks?: number;
        uuid?: string;
        responseToUuid?: string[];
    }): SmmpHeader {
        const message = new SmmpHeader({});
        if (data.control != null) {
            message.control = data.control;
        }
        if (data.payloadLen != null) {
            message.payloadLen = data.payloadLen;
        }
        if (data.blockNum != null) {
            message.blockNum = data.blockNum;
        }
        if (data.totalBlocks != null) {
            message.totalBlocks = data.totalBlocks;
        }
        if (data.uuid != null) {
            message.uuid = data.uuid;
        }
        if (data.responseToUuid != null) {
            message.responseToUuid = data.responseToUuid;
        }
        return message;
    }
    toObject() {
        const data: {
            control?: Uint8Array;
            payloadLen?: number;
            blockNum?: number;
            totalBlocks?: number;
            uuid?: string;
            responseToUuid?: string[];
        } = {};
        if (this.control != null) {
            data.control = this.control;
        }
        if (this.payloadLen != null) {
            data.payloadLen = this.payloadLen;
        }
        if (this.blockNum != null) {
            data.blockNum = this.blockNum;
        }
        if (this.totalBlocks != null) {
            data.totalBlocks = this.totalBlocks;
        }
        if (this.uuid != null) {
            data.uuid = this.uuid;
        }
        if (this.responseToUuid != null) {
            data.responseToUuid = this.responseToUuid;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.control.length)
            writer.writeBytes(1, this.control);
        if (this.payloadLen != 0)
            writer.writeUint32(2, this.payloadLen);
        if (this.has_blockNum)
            writer.writeUint32(3, this.blockNum);
        if (this.has_totalBlocks)
            writer.writeUint32(4, this.totalBlocks);
        if (this.uuid.length)
            writer.writeString(5, this.uuid);
        if (this.responseToUuid.length)
            writer.writeRepeatedString(6, this.responseToUuid);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmmpHeader {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmmpHeader();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.control = reader.readBytes();
                    break;
                case 2:
                    message.payloadLen = reader.readUint32();
                    break;
                case 3:
                    message.blockNum = reader.readUint32();
                    break;
                case 4:
                    message.totalBlocks = reader.readUint32();
                    break;
                case 5:
                    message.uuid = reader.readString();
                    break;
                case 6:
                    pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SmmpHeader {
        return SmmpHeader.deserialize(bytes);
    }
}
